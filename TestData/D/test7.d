// Expressions
void f()
{
  a;
  a, b;
  a ? b : c;
  a | b;
  a || b;
  a & b;
  a && b;
  (a && b || c);
  (a && (b ^ c));
  *a;
  -a;
  !a;
  !intnum;
  !isnum;
  a is b;
  a !is b;
  a ! is b;
  a ! is(b);
  a in b;
  a !in b;
  a ! in b;
  a ! in(b);
  (a << b);
  (a >> b);
  a >>> b;
  a != b;
  a == b;
  (a < b && (1 <= c));
  (a > b && c >= 1);
  (a <> b);
  a !<> b;
  a !<>= b;
  a !< b;
  a !<= b;
  a !>= b;
  a !> b;
  a++; ++a; a--; --a;
  ~a;
  a(this);
  a(b);
  a(b, c, d);
  a!b(c);
  a!(b)(c);
  a!(b, c)(d, e);
  a[1];
  a[b];
  a[1..2];
  a[0x1..0x2];
  a[1..$];
  ((a * (b / c) + d - e) % f);
  a = b;
  a += b;
  a *= c;
  a -= b;
  a /= b;
  a %= b;
  a &= b;
  a |= b;
  a ^= b;
  a ~= b;
  a <<= b;
  a >>= b;
  a >>>= b;
  a.b;
  a.b();
  (a).b;
  cast(a)b;
  new a;
  new a();
  new a(b);
  new a[]();
  new a[10]();
  new a[10][10](b);
  new char[10];
  new char[][20];
  new char[10][20];
  new char[][];
  new char[][](20);
  new int[][][](10, 20, 30);
  a.new b;
  a.new b();
  delete a;
  "abc";
  'a';
  123456;
  123456u;
  123456Ul;
  1e23;
  1.0;
  1.1e3;
  1.1e-3;
  1.1e+3;
  1.1E-9;
  1.1E+9;
  .345E2f;
  0.345E2f;
  10f;
  10.;
  0XFp1F;
  0x1.FFFFFFFFFFFFFp1023;
  0x1p-52;
  1.175494351e-38F;
  6.3i;
  6.3fi;
  6.3Li;
  [1,2,3];
  [1u,2,3];
  [21u:"he", 38:"ho", 2:"hi"];
  null;
  this.a;
  this.a();
  super(b);
  (true);
  (a || false);
  assert(a);
  assert(a, b);
  mixin(a);
  mixin("a + 1");
  cast(T)a;
  cast(typeof(T))a;
  cast(typeof(this))a;
  typeid(T);
  typeid(a ? b : c);
  A.b;
  A.b();
  (A).sizeof;
  (A*).sizeof;
  (int).sizeof;
  (int*).sizeof;
  (int**).sizeof;
  (int[][][]).sizeof;
  //is (T);
  //is (T : struct);
  //assert(is(typeof(cast(const)x) == const int));

  // Function literals
  (a) { return a+2; }; // a is inferred to be int
  (int) { return a+a; };
  (int a) { return a+a; };
  (int a, double b) { return a+a; };
  (A a) { return a+a; };
  (A a, B b) { return a+a; };
  (const A a, B b) { return a+a; };
  (ref A a, ref B b) { return a+a; };
}
